                COMP 40 Lab: Unboxed and 2D Arrays


+--------------------------------------------------------+
|Keeper of the record:  Alexander Tsuetaki               |
|--------------------------------------------------------|
| Other group member(s):  Tianyi Ma                      |
|                                                        |
|                                                        |
|                                                        |
+--------------------------------------------------------+


PART 1: BOXED AND UNBOXED ARRAYS
--------------------------------

You are about to design the interface and implementation for a
collection data type, I.e. an ADT like Hanson's, and you are
considering the tradeoffs between using a boxed or an unboxed
interface for values that users store in your collection.

1A: Briefly define the terms "boxed" and "unboxed" as used for these
    interfaces (I.e. help us be sure you know which is which!):

    In a boxed interface, the pointers to data are what is stored in each 
    element, in a unboxed interface the inteface stores the data itself in 
    each element.



1B: List two (or more) advantages of the boxed representation.
    A boxed interface 
    
    A boxed representation will be more flexible on what is allowed to be inside
    it as each element has a void pointer that can be assigned to diffent values

    Hides the information about the elements and gives the implimenter more 
    power 
    
    Makes interafces simpler to use.



1C: List two (or more) advantages of an unboxed representation.
    
    An unboxed representation will use less memory as the pointer and the data
    will not be added, but just the data

    An unboxed representation will take less time to read as the they do not 
    have to go through the pointer




1D: Look at the interface to UArray (the pointer to an interface
    summary is in the lab instructions). Discuss the methods that show
    the use of the unboxed style. Why, for example, does UArray_new
    take both a number of elements and an element size? 

    UArray_new needs to take both the number of elements and the element size
    because it needs to know how much space to allocate. If it were an unboxed
    interface all the elemnets would just be the size of a pointer
    



PART 2: 2D Arrays from 1D Arrays
--------------------------------

2A. One way to construct a 2D array is to use multiple 1D
    arrays. Describe briefly how you would do this. For example, if
    the user asked you to create a 5x7 array of values, how many
    one-dimensional arrays would you create? If the user asked to
    store a value in cell [3,6] where would it go?


    Here you would have 6 one dimentional arrays, an array with pointers
    to 5 arrays and the 5 arrays with 7 elements each. The stored value
    would go to the third element of the first array then the 6th element of 
    the 3 element fo the first array





2B. Another approach is to use a single one-dimensional array and to
    put all the elements of the 2D array into that. Again, assumingg
    that you are to create a 7x5 2D array, give a mathematical formula
    for the index in the 1D array where a value [x,y], would go in the
    1D array.

    location = x*5+y this is becasue y will represent the y value, which is
    stored in x and each x is 5 elents long given 0<=x<7. 




2C. (optional) is there another mapping that would work as well?
    











PART 3: Designing the UArray2 Interface
---------------------------------------

3A. Describe three (or more) things you learned about the design and semantics 
    of the UArray2 interface that you learned from reading useuarray2.c
    and from running correct_useuarray2.

    
    1)	The Code in useuarray2.c first initialized a test UArray 
    	 then checks the size(dimentions(height,width) and size of 
	elements) by comparing it to the use inputed "test_array values"
	and assignes it to a boolean "OK". The UArray is then populated with
	one value in the corner of the array as a marker for running the maping
	functions. The maping function are then called with the check_and_print
	function to traverse the array and print out the locations.

    2) UArray2 must provide a function to initialize and free memory a 
       function to map the coloums, a function to map the rows.

    3) Yes as it hows that there should be a function that traverses the array 
       generally that both map function are passed into

    4) UArray2_new sets the dimentions that bound  UArray2_at

